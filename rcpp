#!/bin/bash

# Function to extract GCC version
get_gcc_version() {
    g++ --version | head -n 1 | awk '{print $4}'
}

# Default C++ standard
cpp_standard="C++20"
cpp_flag="-std=c++20"

# Check if --std=c++17 flag is passed
if [[ " $* " == *" --cpp17 "* ]]; then
    cpp_standard="C++17"
    cpp_flag="-std=c++17"
fi

# Function to display compiler information
show_compiler_info() {
    echo "🔧    Compiler GCC:"
    echo "🛠️     GCC Version: $(get_gcc_version)"
    echo "📋    C++ Standard Version: $cpp_standard"
    echo "🚩    Compiler Flags: $cpp_flag -Wall -Wextra"
    echo
}

# Check if a file is provided
if [ -z "$1" ]; then
    echo "Usage: $0 <cpp_file> [options]"
    exit 1
fi

# Extract the file name without extension
filename=$(basename "$1" .cpp)

# Check if the file exists
if [ ! -f "$1" ]; then
    echo "Error: File '$1' not found!"
    exit 1
fi

# Enable verbose mode if specified
if [[ " $* " == *" --verbose "* ]]; then
    set -x  # Enable command tracing
fi

# Show compiler information
show_compiler_info

# Compile the program with or without debug flags
if [[ " $* " == *" --debug "* ]]; then
    echo "🐞    Debug mode enabled!"
    g++ $cpp_flag -Wall -Wextra -g -o "$filename" "$1"
else
    g++ $cpp_flag -Wall -Wextra -o "$filename" "$1"
fi

# Check if compilation was successful
if [ $? -eq 0 ]; then
    echo "✅    Compilation successful!"
    echo "🚀    Running $filename..."
    echo "-----------------------------"
    ./"$filename"
else
    echo "❌    Compilation failed!"
    exit 1
fi

# Skip cleaning if --no-clean is passed
if [[ " $* " != *" --no-clean "* ]]; then
    echo "🧹    Cleaning up..."
    rm "$filename"
fi
