#!/bin/bash

# Quick mode flag
quick_mode=false

# Function to extract the GCC version
get_gcc_version() {
    g++ --version | head -n 1 | awk '{print $4}'
}

# Function to print a formatted line
print_line() {
    if [ "$quick_mode" = false ]; then
        terminal_width=$(tput cols)
        line_width=$((terminal_width * 99 / 100))
        gum style --foreground $1 "$(gum join --horizontal $(printf "‚ñÅ%.0s" $(seq 1 $line_width)))"
        gum style --foreground $2 "$(gum join --horizontal $(printf "‚ñî%.0s" $(seq 1 $line_width)))"
    fi
}

# Function to display styled message
print_message() {
    local color=$1
    local message=$2
    
    if [ "$quick_mode" = false ]; then
        print_line 33 46
        gum style --foreground $color "$message"
        print_line 33 46
    else
        echo "$message"
    fi
}

# Function to display error and exit
show_error() {
    if [ "$quick_mode" = false ]; then
        print_message 196 "‚ùå Error: $1"
    else
        echo "Error: $1"
    fi
    exit 1
}

# Function to display compiler information
show_compiler_info() {
    if [ "$quick_mode" = false ]; then
        print_line 33 46
        gum style --foreground 39 "üîß    Compiler GCC:"
        gum style --foreground 45 "üõ†Ô∏è     GCC Version: $(get_gcc_version)"
        gum style --foreground 51 "üìã    C++ Standard Version: $cpp_standard"
        gum style --foreground 87 "üö©    Compiler Flags: -std=$cpp_standard -Wall -Wextra"
        print_line 33 46
    fi
}

# Function to show usage information
show_usage() {
    if [ "$quick_mode" = false ]; then
        print_message 202 "‚ùå Usage: $0 <cpp_file> [-s c++17|c++20] [-d] [-v] [-n] [-q]"
    else
        echo "Usage: $0 <cpp_file> [-s c++17|c++20] [-d] [-v] [-n] [-q]"
    fi
}

# Function to select a C++ file interactively - now with recursive search
select_cpp_file() {
    # Find all .cpp files recursively in the current directory and subdirectories
    files=$(find . -name "*.cpp" -type f | sort | sed 's|^\./||')
    
    # Check if any C++ files were found
    if [ -z "$files" ]; then
        show_error "No C++ files found in the current directory or subdirectories."
    fi

    # Use gum filter to let the user select a file
    selected_file=$(echo "$files" | gum filter --placeholder "üìÇ Type to filter and select a C++ file to compile..." --indicator "‚û§" --indicator.foreground 212)
    
    # Check if a file was selected
    if [ -z "$selected_file" ]; then
        show_error "No file selected. Exiting."
    fi
    
    echo "$selected_file"
}

# Default settings
cpp_standard="c++20"  # Default C++ standard version
debug_mode=false      # Debug mode disabled by default
verbose_mode=false    # Verbose mode disabled by default
no_clean=false        # Cleanup enabled by default
cpp_file=""           # Initialize cpp_file variable

# Parse command-line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        # Set C++ standard (only supports c++17 or c++20)
        -s)
            if [[ "$2" == "c++17" || "$2" == "c++20" ]]; then
                cpp_standard="$2"
                shift 2  # Move past the argument
            else
                show_error "Invalid C++ standard. Use 'c++17' or 'c++20'."
            fi
            ;;
        # Enable debug mode
        -d) debug_mode=true; shift ;;
        # Enable verbose mode (for debugging script execution)
        -v) verbose_mode=true; shift ;;
        # Disable cleaning after execution
        -n) no_clean=true; shift ;;
        # Enable quick mode (skip UI)
        -q) quick_mode=true; shift ;;
        # Handle the input file argument
        *)
            if [[ -z "$cpp_file" ]]; then
                cpp_file="$1"
                shift
            else
                show_error "Unrecognized option '$1'."
            fi
            ;;
    esac
done

# Check if Gum CLI is installed (only needed if not in quick mode)
if [ "$quick_mode" = false ] && ! command -v gum &> /dev/null; then
    echo "Error: Gum CLI is not installed. Please install it first."
    echo "Visit: https://github.com/charmbracelet/gum"
    echo "You can use -q flag to run in quick mode without Gum."
    exit 1
fi

# If no C++ file was provided as an argument, prompt the user to select one
if [ -z "$cpp_file" ]; then
    if ! command -v gum &> /dev/null; then
        show_error "No file provided and Gum is not installed for interactive selection."
    fi
    cpp_file=$(select_cpp_file)
fi

# Check if the source file exists
if [ ! -f "$cpp_file" ]; then
    show_error "File '$cpp_file' not found!"
fi

# Get absolute path of the source file
cpp_file_abs=$(realpath "$cpp_file")

# Extract the filename without extension for the output binary
filename=$(basename "$cpp_file" .cpp)

# Get the directory of the source file
source_dir=$(dirname "$cpp_file_abs")

# Store the current directory
current_dir=$(pwd)

# Enable verbose mode if requested
if [ "$verbose_mode" = true ]; then
    print_message 208 "üîç Verbose mode enabled - tracing commands..."
    set -x  # Enable command tracing for debugging
fi

# Display compiler information
show_compiler_info

# Prepare compile command - compiled binary goes to current directory
compile_cmd="g++ -std=$cpp_standard -Wall -Wextra"
if [ "$debug_mode" = true ]; then
    print_message 208 "üêû Debug mode enabled!"
    compile_cmd+=" -g"
else
    if [ "$quick_mode" = false ]; then
        print_message 51 "üî® Compiling with standard optimizations..."
    fi
fi

# Create the output binary in the current directory
binary_path="$current_dir/$filename"
compile_cmd+=" -o \"$binary_path\" \"$cpp_file_abs\""

# Compile the program
eval $compile_cmd

# Check if compilation was successful
if [ $? -eq 0 ]; then
    if [ "$quick_mode" = false ]; then
        print_message 46 "‚úÖ Compilation successful!"
        gum style --foreground 27 "üöÄ Running $filename..."
        print_line 33 46
        
        # Program output section
        print_line 33 46
        gum style --foreground 39 "üì§ Program Output:"
        print_line 33 46
    else
        terminal_width=$(tput cols)
        line_width=$((terminal_width * 99 / 100))
        echo "Compilation successful. Running $filename..."
        echo "$(printf "‚ñî%.0s" $(seq 1 $line_width))"
        echo "Program Output:"
        echo "$(printf "‚ñî%.0s" $(seq 1 $line_width))"
    fi
    
    # Change directory to the location of the compiled binary before running
    cd "$current_dir"
    
    # Run the program with explicit path
    "$binary_path"
    run_status=$?
    
    if [ "$quick_mode" = false ]; then
        print_line 33 46
    else
        terminal_width=$(tput cols)
        line_width=$((terminal_width * 99 / 100))
        echo "$(printf "‚ñî%.0s" $(seq 1 $line_width))"
    fi
    
    # If the program didn't exit successfully, show the error code
    if [ $run_status -ne 0 ]; then
        print_message 196 "‚ö†Ô∏è Program exited with code $run_status"
    fi
else
    show_error "Compilation failed!"
fi

# Clean up the compiled file unless -n is passed
if [ "$no_clean" = false ]; then
    if [ "$quick_mode" = false ]; then
        print_message 105 "üßπ Cleaning up..."
    fi
    rm "$binary_path"
    if [ "$quick_mode" = false ]; then
        print_message 46 "‚ú® All done!"
    else
        echo "Cleaned up. All done!"
    fi
else
    if [ "$quick_mode" = false ]; then
        print_message 214 "üìù Keeping binary file: $binary_path"
        print_message 46 "‚ú® All done!"
    else
        echo "Keeping binary file: $binary_path"
        echo "All done!"
    fi
fi