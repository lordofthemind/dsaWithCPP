#!/bin/bash

# Quick mode flag
quick_mode=false

# Function to extract the GCC version
get_gcc_version() {
    g++ --version | head -n 1 | awk '{print $4}'
}

# Function to print a formatted line
print_line() {
    if [ "$quick_mode" = false ]; then
        terminal_width=$(tput cols)
        line_width=$((terminal_width * 90 / 100))
        gum style --foreground $1 "$(gum join --horizontal $(printf "‚ñÅ%.0s" $(seq 1 $line_width)))"
        gum style --foreground $2 "$(gum join --horizontal $(printf "‚ñî%.0s" $(seq 1 $line_width)))"
    fi
}

# Function to display styled message
print_message() {
    local color=$1
    local message=$2
    
    if [ "$quick_mode" = false ]; then
        print_line 33 46
        gum style --foreground $color "$message"
        print_line 33 46
    else
        echo "$message"
    fi
}

# Function to display error and exit
show_error() {
    if [ "$quick_mode" = false ]; then
        print_message 196 "‚ùå Error: $1"
    else
        echo "Error: $1"
    fi
    exit 1
}

# Function to display compiler information
show_compiler_info() {
    if [ "$quick_mode" = false ]; then
        print_line 33 46
        gum style --foreground 39 "üîß    Compiler GCC:"
        gum style --foreground 45 "üõ†Ô∏è     GCC Version: $(get_gcc_version)"
        gum style --foreground 51 "üìã    C++ Standard Version: $cpp_standard"
        gum style --foreground 87 "üö©    Compiler Flags: -std=$cpp_standard -Wall -Wextra"
        print_line 33 46
    fi
}

# Function to show usage information
show_usage() {
    if [ "$quick_mode" = false ]; then
        print_message 202 "‚ùå Usage: $0 <cpp_file> [-s c++17|c++20] [-d] [-v] [-n] [-q]"
    else
        echo "Usage: $0 <cpp_file> [-s c++17|c++20] [-d] [-v] [-n] [-q]"
    fi
}

# Default settings
cpp_standard="c++20"  # Default C++ standard version
debug_mode=false      # Debug mode disabled by default
verbose_mode=false    # Verbose mode disabled by default
no_clean=false        # Cleanup enabled by default

# Parse command-line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        # Set C++ standard (only supports c++17 or c++20)
        -s)
            if [[ "$2" == "c++17" || "$2" == "c++20" ]]; then
                cpp_standard="$2"
                shift 2  # Move past the argument
            else
                show_error "Invalid C++ standard. Use 'c++17' or 'c++20'."
            fi
            ;;
        # Enable debug mode
        -d) debug_mode=true; shift ;;
        # Enable verbose mode (for debugging script execution)
        -v) verbose_mode=true; shift ;;
        # Disable cleaning after execution
        -n) no_clean=true; shift ;;
        # Enable quick mode (skip UI)
        -q) quick_mode=true; shift ;;
        # Handle the input file argument
        *)
            if [[ -z "$cpp_file" ]]; then
                cpp_file="$1"
                shift
            else
                show_error "Unrecognized option '$1'."
            fi
            ;;
    esac
done

# Check if Gum CLI is installed (only needed if not in quick mode)
if [ "$quick_mode" = false ] && ! command -v gum &> /dev/null; then
    echo "Error: Gum CLI is not installed. Please install it first."
    echo "Visit: https://github.com/charmbracelet/gum"
    echo "You can use -q flag to run in quick mode without Gum."
    exit 1
fi

# Ensure a C++ source file is provided
if [ -z "$cpp_file" ]; then
    show_usage
    exit 1
fi

# Extract the filename without extension
filename=$(basename "$cpp_file" .cpp)

# Check if the source file exists
if [ ! -f "$cpp_file" ]; then
    show_error "File '$cpp_file' not found!"
fi

# Enable verbose mode if requested
if [ "$verbose_mode" = true ]; then
    print_message 208 "üîç Verbose mode enabled - tracing commands..."
    set -x  # Enable command tracing for debugging
fi

# Display compiler information
show_compiler_info

# Prepare compile command
compile_cmd="g++ -std=$cpp_standard -Wall -Wextra"
if [ "$debug_mode" = true ]; then
    print_message 208 "üêû Debug mode enabled!"
    compile_cmd+=" -g"
else
    if [ "$quick_mode" = false ]; then
        print_message 51 "üî® Compiling with standard optimizations..."
    fi
fi
compile_cmd+=" -o \"$filename\" \"$cpp_file\""

# Compile the program
eval $compile_cmd

# Check if compilation was successful
if [ $? -eq 0 ]; then
    if [ "$quick_mode" = false ]; then
        print_message 46 "‚úÖ Compilation successful!"
        gum style --foreground 27 "üöÄ Running $filename..."
        print_line 33 46
        
        # Program output section
        print_line 33 46
        gum style --foreground 39 "üì§ Program Output:"
        print_line 33 46
    else
        terminal_width=$(tput cols)
        line_width=$((terminal_width * 90 / 100))
        echo "Compilation successful. Running $filename..."
        echo "$(printf "‚ñî%.0s" $(seq 1 $line_width))"
        echo "Program Output:"
        echo "$(printf "‚ñî%.0s" $(seq 1 $line_width))"
    fi
    
    # Run the program
    ./"$filename"
    
    if [ "$quick_mode" = false ]; then
        print_line 33 46
    else
        terminal_width=$(tput cols)
        line_width=$((terminal_width * 90 / 100))
        echo "$(printf "‚ñî%.0s" $(seq 1 $line_width))"
    fi
else
    show_error "Compilation failed!"
fi

# Clean up the compiled file unless -n is passed
if [ "$no_clean" = false ]; then
    if [ "$quick_mode" = false ]; then
        print_message 105 "üßπ Cleaning up..."
    fi
    rm "$filename"
    if [ "$quick_mode" = false ]; then
        print_message 46 "‚ú® All done!"
    else
        echo "Cleaned up. All done!"
    fi
else
    if [ "$quick_mode" = false ]; then
        print_message 214 "üìù Keeping binary file: $filename"
        print_message 46 "‚ú® All done!"
    else
        echo "Keeping binary file: $filename"
        echo "All done!"
    fi
fi

